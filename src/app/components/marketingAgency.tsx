"use client";
import axios from "axios";
import React, { useState } from "react";
import SubmitPopup from "./SubmitPopup";

function MarketingAgency() {
  return (
    <section className="grid lg:grid-cols-2 gap-10">
      {/* Left Content**** */}
      <div className="flex flex-col justify-center gap-6">
        <h2 className="md:text-6xl text-3xl w-[90%] font-medium">
          Work with the Indiaâ€™s Best Hotel Marketing{" "}
          <span className="text-orange-primary font-bold">Agency</span>
        </h2>
        <p className="text-lg">
          Transforming hotels & restaurants into thriving destinations with our
          expert hospitality marketing solutions.
        </p>
        <div className="flex md:flex-row flex-col md:items-center md:gap-8 gap-3">
          <p className="text-lg flex items-center gap-5">
            Trusted by leading brands:{" "}
            <span className="lg:block hidden">
              <GoogleIcon />
            </span>
          </p>
          <div className="lg:block flex gap-10 lg:ps-0 ps-5">
            <span className="block lg:hidden">
              <GoogleIcon />
            </span>
            <TrustPiolet />
          </div>
        </div>
      </div>

      {/* Right Consulation Form**** */}
      <div className="flex lg:justify-end lg:pt-0 pt-2" id="contact">
        <ConsulationForm />
      </div>
    </section>
  );
}

export const ConsulationForm = () => {
  const [userName, setUserName] = useState("");
  const [userEmail, setUserEmail] = useState("");
  const [userMessage, setUserMessage] = useState("");
  const [userPhone, setUserPhone] = useState("");
  const [formRes, setFormRes] = useState(false);

  const [openPopup, setOpenPopup] = useState(false);
  const [popupMsg, setPopupMsg] = useState("");
  const [loader, setLoader] = useState(false);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setFormRes(true);

    try {
      setLoader(true);
      const data = await axios.post(
        "https://nexon.eazotel.com/eazotel/addcontacts",
        {
          Domain: "fielmente", // Replace with your actual domain value
          email: userEmail,
          Name: userName,
          Contact: userPhone,
          // Subject: userMessage,
          Description: userMessage,
        }
      );
      if (data.status) {
        setLoader(false);
        setPopupMsg("You information has been Received");
        setOpenPopup(true);
        // console.log(data.Status);
        setFormRes(true);
        setUserName("");
        setUserEmail("");
        setUserMessage("");
        setUserPhone("");
      } else {
        setLoader(false);
        setPopupMsg("Something went wrong!");
        setOpenPopup(false);
        setFormRes(false);
      }
    } catch (error) {
      setLoader(false);
      console.error("Error submitting form:", error);
      setFormRes(false);
      alert("Something went wrong!");
    }
  };

  const onClose = () => {
    setOpenPopup(!openPopup);
  };
  return (
    <form
      className="lg:min-w-[330px] min-w-full bg-gray-50 rounded-lg flex flex-col gap-8 px-6 py-8"
      onSubmit={handleSubmit}
    >
      <h2 className="text-blue-dark capitalize text-3xl font-normal tracking-wider">
        Get A FREE Consultation!
      </h2>
      <div className="border border-gray-400 rounded-lg p-5 flex items-center gap-3">
        <FillUserIcon />
        <input
          type="text"
          className="outline-none text-black text-2xl font-medium w-full"
          placeholder="Your Name*"
          value={userName}
          onChange={(e) => setUserName(e.target.value)}
          required
        />
      </div>
      <div className="border border-gray-400 rounded-lg p-5 flex items-center gap-3">
        <FillPhoneIcon />
        <input
          type="text"
          className="outline-none text-black text-2xl font-medium w-full"
          placeholder="Phone Number*"
          value={userPhone}
          onChange={(e) => setUserPhone(e.target.value)}
          required
        />
      </div>
      <div className="border border-gray-400 rounded-lg p-5 flex items-center gap-3">
        <FillMail />
        <input
          type="text"
          className="outline-none text-black text-2xl font-medium w-full"
          placeholder="Email*"
          value={userEmail}
          onChange={(e) => setUserEmail(e.target.value)}
          required
        />
      </div>
      <div className="border border-gray-400 rounded-lg p-5 flex gap-3">
        <FillMessage />

        <textarea
          className="outline-none text-black text-2xl font-medium w-full resize-none"
          placeholder="Message*"
          value={userMessage}
          rows={4}
          onChange={(e) => setUserMessage(e.target.value)}
          required
        ></textarea>
      </div>

      {/* Submit Button**** */}
      <div>
        {loader ? (
          <button
            type="submit"
            className="bg-orange-primary border border-orange-primary hover:bg-transparent hover:text-blue-dark w-full py-3 text-lg rounded-lg inline-block active:scale-90 duration-200"
          >
            Submiting...
          </button>
        ) : (
          <button
            type="submit"
            className="bg-orange-primary border border-orange-primary hover:bg-transparent hover:text-blue-dark w-full py-3 text-lg rounded-lg inline-block active:scale-90 duration-200"
          >
            Submit
          </button>
        )}
      </div>

      {openPopup && (
        <SubmitPopup isShow={openPopup} msg={popupMsg} onClose={onClose} />
      )}
    </form>
  );
};

export const GoogleIcon = () => {
  return (
    <svg
      width="32"
      height="32"
      viewBox="0 0 32 32"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clipPath="url(#clip0_2004_764)">
        <path
          d="M27.2 0H4.8C2.14903 0 0 2.14903 0 4.8V27.2C0 29.851 2.14903 32 4.8 32H27.2C29.851 32 32 29.851 32 27.2V4.8C32 2.14903 29.851 0 27.2 0Z"
          fill="white"
        />
        <path
          d="M24.125 25C26.9375 22.375 28.1875 18 27.4375 13.8125H16.25V18.4375H22.625C22.375 19.9375 21.5 21.1875 20.25 22L24.125 25Z"
          fill="#4285F4"
        />
        <path
          d="M5.625 21.3125C6.44719 22.9321 7.62631 24.344 9.0735 25.4416C10.5207 26.5392 12.1982 27.294 13.9795 27.6491C15.7608 28.0042 17.5995 27.9502 19.3569 27.4913C21.1143 27.0324 22.7447 26.1806 24.125 25L20.25 22C16.9375 24.1875 11.4375 23.375 9.5625 18.25L5.625 21.3125Z"
          fill="#34A853"
        />
        <path
          d="M9.5625 18.25C9.0625 16.6875 9.0625 15.25 9.5625 13.6875L5.625 10.625C4.1875 13.5 3.75 17.5625 5.625 21.3125L9.5625 18.25Z"
          fill="#FBBC02"
        />
        <path
          d="M9.5625 13.6875C10.9375 9.37501 16.8125 6.87501 20.75 10.5625L24.1875 7.18751C19.3125 2.50001 9.8125 2.68751 5.625 10.625L9.5625 13.6875Z"
          fill="#EA4335"
        />
      </g>
      <defs>
        <clipPath id="clip0_2004_764">
          <rect width="32" height="32" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export const TrustPiolet = () => {
  return (
    <svg
      width="128"
      height="32"
      viewBox="0 0 128 32"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M33.6429 11.3401H46.5923V13.795H41.4936V27.6334H38.6989V13.795H33.6216L33.6429 11.3401ZM46.0376 15.8371H48.4269V18.1181H48.4696C48.5549 17.7923 48.7043 17.4881 48.9176 17.184C49.1309 16.8798 49.3869 16.5974 49.7069 16.3584C50.0056 16.0978 50.3469 15.9022 50.7309 15.7502C51.0936 15.5981 51.4776 15.5112 51.8616 15.5112C52.1603 15.5112 52.3736 15.5329 52.4803 15.5329C52.5869 15.5546 52.7149 15.5764 52.8216 15.5764V18.0747C52.6509 18.0312 52.4589 18.0095 52.2669 17.9878C52.0749 17.966 51.9043 17.9443 51.7123 17.9443C51.2856 17.9443 50.8803 18.0312 50.4963 18.205C50.1123 18.3788 49.7923 18.6395 49.4936 18.9654C49.2163 19.313 48.9816 19.7257 48.8109 20.2254C48.6403 20.725 48.5549 21.3116 48.5549 21.9633V27.5682H45.9949L46.0376 15.8371ZM64.5549 27.6334H62.0376V25.9823H61.9949C61.6749 26.5906 61.2056 27.0468 60.5869 27.4162C59.9683 27.7855 59.3283 27.9593 58.6883 27.9593C57.1736 27.9593 56.0643 27.5899 55.3816 26.8079C54.6989 26.0475 54.3576 24.8744 54.3576 23.332V15.8371H56.9176V23.0713C56.9176 24.1141 57.1096 24.8527 57.5149 25.2654C57.8989 25.6999 58.4536 25.9172 59.1576 25.9172C59.6909 25.9172 60.1389 25.8303 60.5016 25.6565C60.8643 25.4827 61.1629 25.2654 61.3763 24.983C61.6109 24.7006 61.7603 24.353 61.8669 23.962C61.9736 23.5709 62.0163 23.1365 62.0163 22.6802V15.8371H64.5763V27.6334H64.5549ZM68.9069 23.8534C68.9923 24.6137 69.2696 25.1351 69.7603 25.461C70.2509 25.7651 70.8483 25.9172 71.5309 25.9172C71.7656 25.9172 72.0429 25.8954 72.3416 25.852C72.6403 25.8085 72.9389 25.7434 73.1949 25.6348C73.4723 25.5261 73.6856 25.3741 73.8563 25.1568C74.0269 24.9396 74.1123 24.6789 74.0909 24.353C74.0696 24.0272 73.9629 23.7447 73.7283 23.5275C73.4936 23.3102 73.2163 23.1582 72.8749 23.0061C72.5336 22.8758 72.1283 22.7671 71.6803 22.6802C71.2323 22.5933 70.7843 22.4847 70.3149 22.3761C69.8456 22.2675 69.3763 22.1371 68.9283 21.9851C68.4803 21.833 68.0963 21.6375 67.7336 21.3551C67.3923 21.0944 67.0936 20.7685 66.9016 20.3557C66.6883 19.943 66.5816 19.465 66.5816 18.8567C66.5816 18.205 66.7309 17.6836 67.0509 17.2491C67.3496 16.8147 67.7549 16.4671 68.2243 16.2064C68.6936 15.9457 69.2269 15.7502 69.8029 15.6415C70.3789 15.5329 70.9336 15.4895 71.4456 15.4895C72.0429 15.4895 72.6189 15.5546 73.1523 15.685C73.6856 15.8153 74.1976 16.0109 74.6243 16.315C75.0723 16.5974 75.4349 16.9885 75.7123 17.4447C76.0109 17.9009 76.1816 18.4657 76.2669 19.1174H73.6003C73.4723 18.4874 73.1949 18.0747 72.7683 17.8574C72.3203 17.6402 71.8296 17.5316 71.2536 17.5316C71.0829 17.5316 70.8483 17.5533 70.6136 17.575C70.3576 17.6185 70.1443 17.6619 69.9096 17.7488C69.6963 17.8357 69.5043 17.966 69.3549 18.1181C69.2056 18.2702 69.1203 18.4874 69.1203 18.7481C69.1203 19.074 69.2269 19.313 69.4403 19.5085C69.6536 19.704 69.9309 19.8561 70.2936 20.0081C70.6349 20.1385 71.0403 20.2471 71.4883 20.334C71.9363 20.4209 72.4056 20.5295 72.8749 20.6381C73.3443 20.7468 73.7923 20.8771 74.2403 21.0292C74.6883 21.1813 75.0936 21.3768 75.4349 21.6592C75.7763 21.9199 76.0749 22.2458 76.2883 22.6368C76.5016 23.0278 76.6083 23.5275 76.6083 24.0923C76.6083 24.7875 76.4589 25.3741 76.1389 25.8737C75.8189 26.3517 75.4136 26.7644 74.923 27.0686C74.4323 27.3727 73.8563 27.59 73.2589 27.742C72.6403 27.8724 72.0429 27.9593 71.4456 27.9593C70.7203 27.9593 70.0376 27.8724 69.4189 27.6986C68.8003 27.5248 68.2456 27.2641 67.7976 26.9382C67.3496 26.5906 66.9869 26.1779 66.7309 25.6565C66.4749 25.1568 66.3256 24.5485 66.3043 23.8316H68.8856V23.8534H68.9069ZM77.3336 15.8371H79.275V12.2743H81.835V15.8153H84.139V17.7488H81.835V24.0489C81.835 24.3313 81.8563 24.5485 81.8776 24.7658C81.8989 24.9613 81.963 25.1351 82.027 25.2654C82.1123 25.3958 82.2403 25.5044 82.3896 25.5696C82.5603 25.6348 82.7736 25.6782 83.0723 25.6782C83.243 25.6782 83.435 25.6782 83.6056 25.6565C83.7763 25.6348 83.9683 25.613 84.139 25.5696V27.5899C83.8616 27.6334 83.5843 27.6551 83.307 27.6768C83.0296 27.7203 82.7736 27.7203 82.475 27.7203C81.7923 27.7203 81.259 27.6551 80.8536 27.5248C80.4483 27.3944 80.1283 27.1989 79.8936 26.9599C79.659 26.6993 79.5096 26.3951 79.4243 26.0258C79.3389 25.6565 79.2963 25.2003 79.275 24.7223V17.7705H77.3336V15.7936V15.8371ZM85.931 15.8371H88.3416V17.4447H88.3843C88.747 16.7495 89.2376 16.2715 89.8776 15.9674C90.5176 15.6633 91.2003 15.5112 91.9683 15.5112C92.8856 15.5112 93.675 15.6633 94.3576 16.0109C95.0403 16.3367 95.595 16.7712 96.043 17.3578C96.491 17.9226 96.8323 18.5961 97.0456 19.3564C97.259 20.1168 97.387 20.9423 97.387 21.7895C97.387 22.5933 97.2803 23.3537 97.0883 24.0923C96.875 24.831 96.5763 25.5044 96.171 26.0692C95.7656 26.6341 95.2536 27.0903 94.6136 27.4379C93.9736 27.7855 93.2483 27.9593 92.395 27.9593C92.0323 27.9593 91.6483 27.9158 91.2856 27.8506C90.923 27.7855 90.5603 27.6768 90.219 27.5248C89.8776 27.3727 89.5576 27.1772 89.2803 26.9382C88.9816 26.6992 88.747 26.4168 88.555 26.1127H88.5123V32H85.9523V15.8371H85.931ZM94.8696 21.7461C94.8696 21.2247 94.8056 20.7033 94.6563 20.2037C94.5283 19.704 94.315 19.2695 94.0376 18.8785C93.7603 18.4874 93.419 18.1833 93.035 17.9443C92.6296 17.7054 92.1603 17.5967 91.6483 17.5967C90.5816 17.5967 89.771 17.9661 89.2163 18.7264C88.683 19.4868 88.4056 20.5078 88.4056 21.7678C88.4056 22.3761 88.4696 22.9192 88.619 23.4189C88.7683 23.9185 88.9603 24.353 89.259 24.7223C89.5363 25.0916 89.8776 25.3741 90.283 25.5913C90.6883 25.8085 91.1363 25.9172 91.6696 25.9172C92.267 25.9172 92.7363 25.7868 93.1416 25.5479C93.547 25.3089 93.867 24.983 94.1443 24.6137C94.4003 24.2227 94.5923 23.7882 94.699 23.2885C94.8056 22.7671 94.8696 22.2675 94.8696 21.7461ZM99.371 11.3401H101.931V13.795H99.371V11.3401ZM99.371 15.8371H101.931V27.6334H99.371V15.8371ZM104.214 11.3401H106.774V27.6334H104.214V11.3401ZM114.582 27.9593C113.664 27.9593 112.832 27.8072 112.107 27.4813C111.382 27.1555 110.784 26.7427 110.272 26.1996C109.782 25.6565 109.398 24.983 109.142 24.2227C108.886 23.4623 108.736 22.6151 108.736 21.7244C108.736 20.8337 108.864 20.0081 109.142 19.2478C109.398 18.4874 109.782 17.8357 110.272 17.2709C110.763 16.7278 111.382 16.2933 112.107 15.9891C112.832 15.685 113.664 15.5112 114.582 15.5112C115.499 15.5112 116.331 15.6633 117.056 15.9891C117.782 16.2933 118.379 16.7278 118.891 17.2709C119.382 17.814 119.766 18.4874 120.022 19.2478C120.278 20.0081 120.427 20.8337 120.427 21.7244C120.427 22.6368 120.299 23.4623 120.022 24.2227C119.744 24.983 119.382 25.6348 118.891 26.1996C118.4 26.7427 117.782 27.1772 117.056 27.4813C116.331 27.7855 115.52 27.9593 114.582 27.9593ZM114.582 25.8955C115.136 25.8955 115.648 25.7651 116.054 25.5261C116.48 25.2872 116.8 24.9613 117.078 24.5703C117.355 24.1792 117.547 23.723 117.675 23.2451C117.803 22.7454 117.867 22.2458 117.867 21.7244C117.867 21.2247 117.803 20.725 117.675 20.2254C117.547 19.7257 117.355 19.2912 117.078 18.9002C116.8 18.5092 116.459 18.205 116.054 17.9661C115.627 17.7271 115.136 17.5967 114.582 17.5967C114.027 17.5967 113.515 17.7271 113.11 17.9661C112.683 18.205 112.363 18.5309 112.086 18.9002C111.808 19.2912 111.616 19.7257 111.488 20.2254C111.36 20.725 111.296 21.2247 111.296 21.7244C111.296 22.2458 111.36 22.7454 111.488 23.2451C111.616 23.7447 111.808 24.1792 112.086 24.5703C112.363 24.9613 112.704 25.2872 113.11 25.5261C113.536 25.7868 114.027 25.8955 114.582 25.8955ZM121.195 15.8371H123.136V12.2743H125.696V15.8153H128V17.7488H125.696V24.0489C125.696 24.3313 125.718 24.5485 125.739 24.7658C125.76 24.9613 125.824 25.1351 125.888 25.2654C125.974 25.3958 126.102 25.5044 126.251 25.5696C126.422 25.6348 126.635 25.6782 126.934 25.6782C127.104 25.6782 127.296 25.6782 127.467 25.6565C127.638 25.6348 127.83 25.613 128 25.5696V27.5899C127.723 27.6334 127.446 27.6551 127.168 27.6768C126.891 27.7203 126.635 27.7203 126.336 27.7203C125.654 27.7203 125.12 27.6551 124.715 27.5248C124.31 27.3944 123.99 27.1989 123.755 26.9599C123.52 26.6993 123.371 26.3951 123.286 26.0258C123.2 25.6565 123.158 25.2003 123.136 24.7223V17.7705H121.195V15.7936V15.8371Z"
        fill="white"
      />
      <path
        d="M30.656 11.3401H18.944L15.3387 0L11.712 11.3401L0 11.3184L9.47201 18.3354L5.84534 29.6755L15.3173 22.6585L24.7894 29.6755L21.184 18.3354L30.656 11.3401Z"
        fill="#00B67A"
      />
      <path
        d="M21.9954 20.8989L21.1847 18.3354L15.3394 22.6585L21.9954 20.8989Z"
        fill="#005128"
      />
    </svg>
  );
};

export const FillUserIcon = () => {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M12 4C13.0609 4 14.0783 4.42143 14.8284 5.17157C15.5786 5.92172 16 6.93913 16 8C16 9.06087 15.5786 10.0783 14.8284 10.8284C14.0783 11.5786 13.0609 12 12 12C10.9391 12 9.92172 11.5786 9.17157 10.8284C8.42143 10.0783 8 9.06087 8 8C8 6.93913 8.42143 5.92172 9.17157 5.17157C9.92172 4.42143 10.9391 4 12 4ZM12 14C16.42 14 20 15.79 20 18V20H4V18C4 15.79 7.58 14 12 14Z"
        fill="#110D3C"
      />
    </svg>
  );
};

export const FillPhoneIcon = () => {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M18.3279 22.5C17.4129 22.5 16.1276 22.1691 14.2029 21.0937C11.8624 19.7812 10.0521 18.5695 7.72432 16.2478C5.47995 14.0048 4.38776 12.5526 2.85917 9.77109C1.13229 6.63046 1.42667 4.98421 1.75573 4.28062C2.1476 3.43968 2.72604 2.93671 3.4737 2.43749C3.89836 2.15926 4.34776 1.92075 4.8162 1.72499C4.86307 1.70484 4.90667 1.68562 4.94557 1.66827C5.1776 1.56374 5.52917 1.40577 5.97448 1.57452C6.27167 1.68609 6.53698 1.91437 6.95229 2.32452C7.80401 3.16452 8.96792 5.0353 9.39729 5.95405C9.68557 6.57327 9.87635 6.98202 9.87682 7.44046C9.87682 7.97718 9.60682 8.39109 9.27917 8.8378C9.21776 8.92171 9.15682 9.00187 9.09776 9.07968C8.74104 9.54843 8.66276 9.6839 8.71432 9.92577C8.81885 10.4119 9.59838 11.8589 10.8795 13.1372C12.1606 14.4155 13.5659 15.1458 14.0539 15.2498C14.306 15.3037 14.4443 15.2222 14.9281 14.8528C14.9974 14.7998 15.0687 14.745 15.1432 14.6901C15.6429 14.3184 16.0376 14.0555 16.5617 14.0555H16.5645C17.0206 14.0555 17.411 14.2533 18.0579 14.5795C18.9017 15.0051 20.8287 16.1541 21.6739 17.0067C22.0849 17.4211 22.3142 17.6855 22.4262 17.9822C22.5949 18.4289 22.436 18.7791 22.3324 19.0134C22.3151 19.0523 22.2959 19.095 22.2757 19.1423C22.0784 19.6099 21.8385 20.0584 21.559 20.482C21.0607 21.2273 20.5559 21.8044 19.7131 22.1967C19.2803 22.4014 18.8066 22.5051 18.3279 22.5Z"
        fill="#110D3C"
      />
    </svg>
  );
};

export const FillMail = () => {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M20 4H4C2.9 4 2.01 4.9 2.01 6L2 18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6C22 4.9 21.1 4 20 4ZM20 8L12 13L4 8V6L12 11L20 6V8Z"
        fill="#110D3C"
      />
    </svg>
  );
};

export const FillMessage = () => {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M19 3C19.7956 3 20.5587 3.31607 21.1213 3.87868C21.6839 4.44129 22 5.20435 22 6V16C22 16.7956 21.6839 17.5587 21.1213 18.1213C20.5587 18.6839 19.7956 19 19 19H7.333L4 21.5C3.176 22.118 2 21.53 2 20.5V6C2 5.20435 2.31607 4.44129 2.87868 3.87868C3.44129 3.31607 4.20435 3 5 3H19ZM11 12H8C7.73478 12 7.48043 12.1054 7.29289 12.2929C7.10536 12.4804 7 12.7348 7 13C7 13.2652 7.10536 13.5196 7.29289 13.7071C7.48043 13.8946 7.73478 14 8 14H11C11.2652 14 11.5196 13.8946 11.7071 13.7071C11.8946 13.5196 12 13.2652 12 13C12 12.7348 11.8946 12.4804 11.7071 12.2929C11.5196 12.1054 11.2652 12 11 12ZM16 8H8C7.74512 8.00028 7.49997 8.09788 7.31463 8.27285C7.1293 8.44782 7.01777 8.68695 7.00283 8.94139C6.98789 9.19584 7.07067 9.44638 7.23426 9.64183C7.39786 9.83729 7.6299 9.9629 7.883 9.993L8 10H16C16.2549 9.99972 16.5 9.90212 16.6854 9.72715C16.8707 9.55218 16.9822 9.31305 16.9972 9.05861C17.0121 8.80416 16.9293 8.55362 16.7657 8.35817C16.6021 8.16271 16.3701 8.0371 16.117 8.007L16 8Z"
        fill="#110D3C"
      />
    </svg>
  );
};

export default MarketingAgency;
